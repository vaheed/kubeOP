name: ci

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  lint-unit:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: kubeop
          POSTGRES_PASSWORD: kubeop
          POSTGRES_DB: kubeop
        ports: ["5432:5432"]
        options: >-
          --health-cmd "pg_isready -U kubeop" --health-interval 5s --health-timeout 3s --health-retries 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.9'
      - name: Go tidy
        run: go mod tidy
      - name: Staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...
      - name: Govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...
      - name: Unit tests
        env:
          KUBEOP_DB_URL: postgres://kubeop:kubeop@localhost:5432/kubeop?sslmode=disable
          KUBEOP_KMS_MASTER_KEY: $(openssl rand -base64 32)
          KUBEOP_REQUIRE_AUTH: "false"
        run: go test ./... -count=1

  e2e:
    runs-on: ubuntu-latest
    needs: lint-unit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.9'
      - name: Install kind and kubectl
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
          chmod +x ./kind && sudo mv ./kind /usr/local/bin/kind
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
      - name: Install Helm
        run: |
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - name: Start compose for db and manager
        run: |
          docker compose up -d db
          sleep 5
          docker compose build --pull manager
          KUBEOP_AGGREGATOR=true docker compose up -d manager
      - name: Wait for manager health
        run: |
          for i in $(seq 1 30); do \
            STATUS=$(docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{end}}' kubeop-manager || true); \
            echo "health=$STATUS"; \
            if [ "$STATUS" = "healthy" ]; then exit 0; fi; \
            sleep 4; \
          done; \
          echo "Manager did not become healthy"; docker compose ps; exit 1
      - name: Run API smoke tests (Manager only)
        env:
          KUBEOP_E2E: "1"
          ARTIFACTS_DIR: artifacts
        run: |
          mkdir -p artifacts
          go test ./hack/e2e -run ApiSmoke -v -timeout=5m
      - name: Show smoke summary
        if: always()
        run: |
          if [ -f artifacts/smoke/summary.txt ]; then echo "--- Smoke Summary ---"; cat artifacts/smoke/summary.txt; fi
      - name: Collect compose logs (always)
        if: always()
        run: |
          mkdir -p artifacts
          docker compose ps > artifacts/compose-ps.txt 2>&1 || true
          docker compose logs manager > artifacts/manager.log 2>&1 || true
          docker compose logs db > artifacts/db.log 2>&1 || true
      - name: Kind up + bootstrap
        if: success()
        env:
          ARTIFACTS_DIR: artifacts
        run: |
          make kind-up
          bash e2e/bootstrap.sh
      - name: Run e2e tests (Kind)
        if: success()
        env:
          KUBEOP_E2E: "1"
          ARTIFACTS_DIR: artifacts
        run: |
          go test ./hack/e2e -run EndToEnd -v -timeout=25m
      - name: Run in-cluster endpoint tests (Kind)
        if: success()
        env:
          KUBEOP_E2E: "1"
          ARTIFACTS_DIR: artifacts
        run: |
          go test ./hack/e2e -run ClusterEndpoints -v -timeout=10m
      - name: Run HPA load tests (Kind)
        if: success()
        env:
          KUBEOP_E2E: "1"
          ARTIFACTS_DIR: artifacts
        run: |
          go test ./hack/e2e -run HPA -v -timeout=12m
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts
          path: artifacts
          retention-days: 30

  images-charts-docs:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [e2e]
    steps:
      - uses: actions/checkout@v4
      - name: Set short SHA
        id: vars
        run: echo "short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
      - name: Resolve base digests
        id: digests
        run: |
          echo "DISTROLESS=$(docker buildx imagetools inspect gcr.io/distroless/static:nonroot | awk '/Digest:/{print $2; exit}')" >> $GITHUB_OUTPUT
          echo "GOLANG=$(docker buildx imagetools inspect golang:1.24.9-alpine | awk '/Digest:/{print $2; exit}')" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push images
        run: |
          BRANCH=${GITHUB_REF_NAME}
          if [ "$BRANCH" = "main" ]; then 
            MANAGER_TAGS="--tag ghcr.io/vaheed/kubeop/manager:latest --tag ghcr.io/vaheed/kubeop/manager:sha-${{ steps.vars.outputs.short }}"
            OPERATOR_TAGS="--tag ghcr.io/vaheed/kubeop/operator:latest --tag ghcr.io/vaheed/kubeop/operator:sha-${{ steps.vars.outputs.short }}"
            PLATFORMS="linux/amd64,linux/arm64"
          else 
            MANAGER_TAGS="--tag ghcr.io/vaheed/kubeop/manager-dev:dev --tag ghcr.io/vaheed/kubeop/manager-dev:sha-${{ steps.vars.outputs.short }}"
            OPERATOR_TAGS="--tag ghcr.io/vaheed/kubeop/operator-dev:dev --tag ghcr.io/vaheed/kubeop/operator-dev:sha-${{ steps.vars.outputs.short }}"
            PLATFORMS="linux/amd64"
          fi
          docker buildx build --platform "$PLATFORMS" -f deploy/Dockerfile.manager $MANAGER_TAGS \
            --build-arg DISTROLESS_BASE=gcr.io/distroless/static:nonroot@${{ steps.digests.outputs.DISTROLESS }} \
            --build-arg GOLANG_BASE=golang:1.24.9-alpine@${{ steps.digests.outputs.GOLANG }} --push .
          docker buildx build --platform "$PLATFORMS" -f deploy/Dockerfile.operator $OPERATOR_TAGS \
            --build-arg DISTROLESS_BASE=gcr.io/distroless/static:nonroot@${{ steps.digests.outputs.DISTROLESS }} \
            --build-arg GOLANG_BASE=golang:1.24.9-alpine@${{ steps.digests.outputs.GOLANG }} --push .
      - name: Set Trivy image ref
        run: |
          if [ "${GITHUB_REF_NAME}" = "main" ]; then 
            echo "TRIVY_REF=ghcr.io/vaheed/kubeop/manager:sha-${{ steps.vars.outputs.short }}" >> $GITHUB_ENV;
          else 
            echo "TRIVY_REF=ghcr.io/vaheed/kubeop/manager-dev:sha-${{ steps.vars.outputs.short }}" >> $GITHUB_ENV;
          fi
      - name: Trivy scan images
        uses: aquasecurity/trivy-action@0.22.0
        with:
          image-ref: ${{ env.TRIVY_REF }}
          format: table
          severity: HIGH,CRITICAL
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0
      - name: Sign images with Cosign
        env:
          COSIGN_YES: 'true'
        run: |
          SHORT=${GITHUB_SHA::7}
          cosign sign ghcr.io/vaheed/kubeop/manager:sha-$SHORT || cosign sign ghcr.io/vaheed/kubeop/manager-dev:sha-$SHORT
          cosign sign ghcr.io/vaheed/kubeop/operator:sha-$SHORT || cosign sign ghcr.io/vaheed/kubeop/operator-dev:sha-$SHORT
      - name: Attach SBOMs (Syft + Cosign)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin v1.7.0
          SHORT=${GITHUB_SHA::7}
          IMG_M=ghcr.io/vaheed/kubeop/manager:sha-$SHORT
          IMG_O=ghcr.io/vaheed/kubeop/operator:sha-$SHORT
          syft $IMG_M -o spdx-json > sbom-manager.json || true
          syft $IMG_O -o spdx-json > sbom-operator.json || true
          cosign attach sbom --sbom sbom-manager.json $IMG_M || true
          cosign attach sbom --sbom sbom-operator.json $IMG_O || true
      - name: Package and push Helm chart (OCI)
        env:
          HELM_EXPERIMENTAL_OCI: 1
        run: |
          helm package charts/kubeop-operator --destination dist/charts
          helm registry login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          helm push dist/charts/*.tgz oci://ghcr.io/vaheed/charts
      - name: Build docs
        run: |
          cd docs
          npm ci
          npm run docs:build
      - name: Deploy GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/.vitepress/dist

  e2e-real:
    if: ${{ vars.E2E_REAL_CLUSTER == 'true' }}
    runs-on: ubuntu-latest
    needs: lint-unit
    steps:
      - uses: actions/checkout@v4
      - name: Use provided kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${KUBECONFIG_CONTENT}" > ~/.kube/config
        env:
          KUBECONFIG_CONTENT: ${{ secrets.E2E_REAL_KUBECONFIG }}
      - name: Smoke run against real cluster
        run: |
          kubectl version
          kubectl get ns kubeop-system || true
