services:
  db:
    image: postgres:16-alpine
    container_name: kubeop-db
    environment:
      POSTGRES_USER: kubeop
      POSTGRES_PASSWORD: kubeop
      POSTGRES_DB: kubeop
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - dbdata:/var/lib/postgresql/data

  manager:
    build:
      context: .
      dockerfile: deploy/Dockerfile.manager
    image: ghcr.io/vaheed/kubeop/manager-dev:dev
    container_name: kubeop-manager
    depends_on:
      db:
        condition: service_healthy
    environment:
      KUBEOP_DB_URL: postgres://kubeop:kubeop@db:5432/kubeop?sslmode=disable
      KUBEOP_REQUIRE_AUTH: "false"
      KUBEOP_JWT_SIGNING_KEY: REPLACE-ME
      KUBEOP_KMS_MASTER_KEY: REPLACE-ME
      KUBEOP_HTTP_ADDR: :8080
      KUBEOP_DEV_INSECURE: "true"
    ports:
      - "18080:8080"
    healthcheck:
      test: ["CMD", "/hc"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 5s

  dns-mock:
    build:
      context: .
      dockerfile: deploy/Dockerfile.dnsmock
    image: ghcr.io/vaheed/kubeop/dns-mock:dev
    container_name: kubeop-dns-mock
    ports:
      - "28080:8080"

  acme-mock:
    build:
      context: .
      dockerfile: deploy/Dockerfile.acmemock
    image: ghcr.io/vaheed/kubeop/acme-mock:dev
    container_name: kubeop-acme-mock
    ports:
      - "28081:8080"

volumes:
  dbdata: {}
